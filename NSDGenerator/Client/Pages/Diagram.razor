@page "/diagram"
@page "/diagram/{id:guid}"

@inject AppState AppState
@inject IDiagramService diagramService;

@implements IDisposable

<PageHeader>
    @if (isEditMode)
    {
        <DiagramEditHeader Model="@model" />
    }
    else
    {
        <h1 class="diagram__name">
            @model?.Name
        </h1>
    }
</PageHeader>

<PageContent>

    @if (model is null)
    {
        <p>Loading diagram...</p>
    }
    else
    {
        @if (firstBlockSelectorVisible)
        {
            <FirstBlockSelector OnTextBlockSelected="@HandleFirstBlockText" OnBranchBlockSelected="@HandleFirstBlockBranch" />
        }
        else
        {
            @if (isEditMode)
            {
                <div class="diagram__edit-info">
                    <SvgIcon SvgUrl="/assets/info-icon.svg" />
                    Click on item below to start editing
                </div>
            }

            <div class="diagram__wrapper">

                <CascadingValue Value="@isEditMode">

                    <Block Model="@model.RootBlock" />

                </CascadingValue>

            </div>
        }
    }

    <DiagramMenu EditMode="@isEditMode" DiagramOwner="@model?.Owner"
                 OnEdit="@HandleEdit" OnPreview="@HandlePreview" OnDelete=@HandleDelete OnDownload="@HandleDownload"
                 OnDuplicate="@HandleDuplicate" OnSave="@HandleSave" />

</PageContent>

@if (deleteDialogVisible)
{
    <DeleteDiagramDialog DiagramName="@model.Name" OnCancel="@HandleDeleteCancel" OnConfirm="@HandleDeleteConfirm" />
}

@if (savingDialogVisible)
{
    <div class="diagram__saving-dialog">
        Saving diagram...
    </div>
}

<InfoDialog IsVisible="@errorDialogVisible" Message="an error occurred while saving diagram" CssSufix="error" IconUrl="/assets/error-icon.svg" />

<InfoDialog IsVisible="@savedDialogVisible" Message="diagram has been saved" IconUrl="/assets/check-icon.svg" />

<InfoDialog IsVisible="@copiedDialogVisible" Message="new diagram has been created" IconUrl="/assets/check-icon.svg" />


@code {
    [Parameter] public Guid? Id { get; set; }

    DiagramModel model;

    bool isEditMode;
    bool deleteDialogVisible;
    bool savingDialogVisible;

    bool savedDialogVisible;
    bool errorDialogVisible;
    bool copiedDialogVisible;

    bool firstBlockSelectorVisible => model?.RootBlock is null;

    protected override async Task OnParametersSetAsync()
    {
        if (Id is not null)
        {
            var diagram = await diagramService.GetDiagramAsync(Id.Value);

            if (diagram is null)
            {
                // show error message

                return;
            }

            AppState.SetCurrentDiagram(diagram);
        }

        if (AppState.CurrentDiagram is null)
            AppState.SetCurrentDiagram(DiagramHelpers.GetNewDiagram());

        model = AppState.CurrentDiagram;

        if (firstBlockSelectorVisible)
            isEditMode = true;
    }


    protected override void OnInitialized()
    {
        AppState.OnChange += AppStateChanged;
    }


    public void Dispose()
    {
        AppState.OnChange -= AppStateChanged;
        AppState.SetCurrentDiagram(null);
    }

    void AppStateChanged() => StateHasChanged();

    void HandleFirstBlockText()
    {
        model.RootBlock = new TextBlockModel();
        AppState.SelectBlock(model.RootBlock.Id);
    }

    void HandleFirstBlockBranch()
    {
        model.RootBlock = new BranchBlockModel();
        AppState.SelectBlock(model.RootBlock.Id);
    }

    void HandleEdit()
    {
        isEditMode = true;
        AppState.SelectBlock(null);
    }

    void HandlePreview()
    {
        isEditMode = false;
    }

    void HandleDelete()
    {
        deleteDialogVisible = true;
    }

    void HandleDeleteCancel()
    {
        deleteDialogVisible = false;
    }

    void HandleDeleteConfirm()
    {
        // TODO
        deleteDialogVisible = false;
    }

    void HandleDuplicate()
    {
        var copy = diagramService.CreateDiagramCopy(model);
        
        AppState.SetCurrentDiagram(copy);
        model = copy;

        copiedDialogVisible = true;
    }

    async Task HandleDownload()
    {
        await diagramService.DownloadDiagramAsync(model);
    }

    async Task HandleSave()
    {
        isEditMode = false;
        errorDialogVisible = false;
        savedDialogVisible = false;

        savingDialogVisible = true;

        var result = await diagramService.SaveDiagramAsync(model);

        savingDialogVisible = false;

        if (result)
            savedDialogVisible = true;
        else
            errorDialogVisible = true;
    }
}
