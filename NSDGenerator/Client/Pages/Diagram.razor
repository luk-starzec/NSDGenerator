@page "/diagram"
@inject AppState AppState
@inject IPersistenceService persistenceService;
@implements IDisposable

<PageHeader>
    @if (isEditMode)
    {
        <input class="diagram__name-edit" @bind="@model.Name" @bind:event="oninput" placeholder="diagram name" />
    }
    else
    {
        <h1>
            @model?.Name
        </h1>
    }
</PageHeader>

<PageContent>

    @if (isEditMode)
    {
        <div class="diagram__edit-info">
            <SvgIcon SvgUrl="/assets/info-icon.svg" />
            Click on item below to start editing
        </div>
    }

    <div class="diagram__wrapper">

        <CascadingValue Value="@isEditMode">

            <Block Model="@model.RootBlock" />

        </CascadingValue>

    </div>

    <DiagramMenu EditMode="@isEditMode" OnEdit="@HandleEdit" OnPreview="@HandlePreview" OnDelete=@HandleDelete OnDownload="@HandleDownload" />

</PageContent>

@if (deleteDialogVisible)
{
    <DeleteDiagramDialog DiagramName="@model.Name" OnCancel="@HandleDeleteCancel" OnConfirm="@HandleDeleteConfirm" />
}

@code {
    DiagramModel model;

    bool isEditMode;
    bool deleteDialogVisible;

    protected override void OnInitialized()
    {
        if (AppState.CurrentDiagram is null)
            AppState.SetCurrentDiagram(DiagramHelpers.GetNewDiagram());

        model = AppState.CurrentDiagram;

        AppState.OnChange += AppStateChanged;
    }

    public void Dispose()
    {
        AppState.OnChange -= AppStateChanged;
    }

    void AppStateChanged() => StateHasChanged();

    void HandleEdit()
    {
        isEditMode = true;
        AppState.SelectBlock(null);
    }

    void HandlePreview()
    {
        isEditMode = false;
    }

    void HandleDelete()
    {
        deleteDialogVisible = true;
    }

    void HandleDeleteCancel()
    {
        deleteDialogVisible = false;
    }

    void HandleDeleteConfirm()
    {
        // TODO
        deleteDialogVisible = false;
    }

    async Task HandleDownload()
    {
        await persistenceService.DownloadDiagram(model);
    }
}
