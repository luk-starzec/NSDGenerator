@page "/my-diagrams"
@inject NavigationManager navigationManager
@inject IDiagramService persistenceService

<PageTitle>Nassi–Shneiderman Diagrams - My diagrams</PageTitle>

<PageHeader @ref="pageHeader">
    <h1>
        My diagrams
    </h1>
</PageHeader>

<PageContent>

    <div class="my-diagrams__wrapper">

        <AuthorizeView>

            <NotAuthorized>

                <UnauthorizedDialog OnLoginClick="@HandleLogin" />

            </NotAuthorized>

            <Authorized>

                @if (showDiagrams)
                {
                    <DiagramList Diagrams="@diagrams" OnViewDiagram="@HandleViewDiagram" OnDownloadDiagram="@HandleDownloadDiagram" />
                }
                else
                {
                    <p class="@cssInfo">@infoMessage</p>
                }

            </Authorized>

        </AuthorizeView>

    </div>

</PageContent>

@code {
    private PageHeader pageHeader;

    private IEnumerable<DiagramDto> diagrams;

    [CascadingParameter] Task<AuthenticationState> authenticationStateTask { get; set; }

    bool showDiagrams => diagrams?.Any() == true;
    bool showError;
    bool emptyDiagrams => diagrams?.Any() == false;

    string infoMessage => showError
        ? "An error occurred while retrieving data"
        : (emptyDiagrams ? "You have no diagrams saved" : "Loading data...");

    string cssInfo => showError
        ? "my-diagrams__info my-diagrams__info--error"
        : (emptyDiagrams ? "my-diagrams__info my-diagrams__info--empty" : "my-diagrams__info");


    void HandleLogin() => pageHeader.ShowLoginForm();

    void HandleViewDiagram(Guid id) => navigationManager.NavigateTo($"/diagram/{id}");

    async Task HandleDownloadDiagram(Guid id)
    {
        var diagram = await persistenceService.GetDiagramAsync(id);
        await persistenceService.DownloadDiagramAsync(diagram);
    }

    protected override async Task OnInitializedAsync()
    {
        var authState = await authenticationStateTask;
        diagrams = await persistenceService.GetMyDiagramsAsync();

        showError = diagrams is null;
    }
}
