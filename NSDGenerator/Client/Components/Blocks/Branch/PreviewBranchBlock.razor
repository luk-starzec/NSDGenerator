
<div class="@CssClass preview-branch-block__wrapper block__wrapper"
     @onclick="HandleBlockClick" @onclick:stopPropagation="true">

    <div class="preview-branch-block__branch-wrapper ">

        <div class="preview-branch-block__condition">
            <div class="preview-branch-block__label">
                @Model.Condition
            </div>
        </div>

        <div class="preview-branch-block__branch preview-branch-block__branch--left">
            <div class="preview-branch-block__label">
                @Model.LeftBranch
            </div>
        </div>

        <div class="preview-branch-block__branch preview-branch-block__branch--right">
            <div class="preview-branch-block__label">
                @Model.RightBranch
            </div>
        </div>
    </div>

    <div class="preview-branch-block__result-wrapper" style="@styleResultColumns">

        <div class="preview-branch-block__result preview-branch-block__result--left">
            @if (LeftResultContent != null)
            {
                @LeftResultContent
            }
            else
            {
                <Block Model="@Model.LeftResult" />
            }
        </div>

        <div class="preview-branch-block__result preview-branch-block__result--right">
            @if (RightResultContent != null)
            {
                @RightResultContent
            }
            else
            {
                <Block Model="@Model.RightResult" />
            }
        </div>

    </div>

</div>

@code {
    [Parameter] public string CssClass { get; set; }

    [Parameter] public BranchBlockModel Model { get; set; }
    [Parameter] public RenderFragment LeftResultContent { get; set; }
    [Parameter] public RenderFragment RightResultContent { get; set; }

    [CascadingParameter] int[] ColumnWidths { get; set; }

    [Parameter] public EventCallback<Guid> OnBlockSelected { get; set; }

    string styleResultColumns => GetWidth();

    string GetWidth()
    {
        if (Model.LeftColumns?.Any() != true)
            return "";

        int left = 0;
        int right = 0;

        for (int i = 0; i < Model.LeftColumns.Count; i++)
        {
            left += ColumnWidths[Model.LeftColumns[i]];
        }
        for (int i = 0; i < Model.RightColumns.Count; i++)
        {
            right += ColumnWidths[Model.RightColumns[i]];
        }
        float width = left + right;
        var percent = (int)(left / width * 100);

        var txt = $"grid-template-columns: {percent}% {100 - percent}%";
        return txt;
    }

    async Task HandleBlockClick() => await OnBlockSelected.InvokeAsync(Model.Id);

}
