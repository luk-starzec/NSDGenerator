@inject AppState AppState
@implements IDisposable

@if (IsEditMode && isSelected)
{
    <EditBranchBlock Model="@Model" CssClass="@CssClass"
                 OnChildAdded="@HandleChildAdded" OnDeleted="HandleBlockDeleted" OnUnselected="@HandleBlockUnselected" />
}
else
{
    <PreviewBranchBlock Model="@Model" CssClass="@cssPreview" OnBlockSelected="@HandleBlockSelected" />
}


@code {
    [Parameter] public string CssClass { get; set; }

    [Parameter] public BranchBlockModel Model { get; set; }

    [CascadingParameter] bool IsEditMode { get; set; }


    bool isSelected => Model.Id == AppState.SelectedBlockId;

    string cssMask => IsEditMode && AppState.SelectedBlockId is not null && !isSelected ? "block__masked" : "";

    string cssPreview => $"{CssClass} {cssMask}";


    protected override void OnInitialized()
    {
        AppState.OnChange += AppStateChanged;
        AppState.OnBlockDeleted += HandleChildDeleted;
    }

    public void Dispose()
    {
        AppState.OnChange -= AppStateChanged;
        AppState.OnBlockDeleted -= HandleChildDeleted;
    }

    void AppStateChanged() => StateHasChanged();

    void HandleBlockSelected(Guid id) => AppState.SelectBlock(id);

    void HandleBlockUnselected() => AppState.SelectBlock(null);

    void HandleBlockDeleted() => AppState.DeleteBlock(Model);

    void HandleChildAdded(bool left)
    {
        var child = left ? Model.LeftResult : Model.RightResult;
        AppState.AddBlock(child);
        AppState.SelectBlock(child.Id);
        StateHasChanged();
    }

    void HandleChildDeleted(Guid id)
    {
        if (Model?.LeftResult?.Id == id)
        {
            Model.LeftResult = null;
            AppState.SelectBlock(null);
        }
        if (Model?.RightResult?.Id == id)
        {
            Model.RightResult = null;
            AppState.SelectBlock(null);
        }
    }

}
