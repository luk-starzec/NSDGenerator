@inject IColumnsViewCalculator columnsViewCalculator;

<div class="@CssClass edit-branch-block__wrapper block__wrapper">

    <div class="edit-branch-block__top-wrapper">

        <div class="edit-branch-block__branch-wrapper" style="@styleBranchColumns">

            <CloseButton OnClose="@HandleUnselected" />

            <DeleteButton OnDeleteBlock="@DeleteBlockClick" />

            <div class="edit-branch-block__condition">
                <input class="edit-branch-block__input" @bind="@ViewModel.Condition" @bind:event="oninput" @onclick:stopPropagation="true" placeholder="condition" />
            </div>

            <div class="edit-branch-block__branch edit-branch-block__branch--left">
                <input class="edit-branch-block__input edit-branch-block__input--short" @bind="@ViewModel.LeftBranch" @bind:event="oninput" @onclick:stopPropagation="true" placeholder="yes" />
            </div>

            <div class="edit-branch-block__branch edit-branch-block__branch--right">
                <input class="edit-branch-block__input edit-branch-block__input--short" @bind="@ViewModel.RightBranch" @bind:event="oninput" @onclick:stopPropagation="true" placeholder="no" />
            </div>

        </div>


        @if (addButtonsAvailable)
        {
            <div class="edit-branch-block__add-wrapper" style="@styleAddColumns">
                <AddButtons OnAddTextBlock="@HandleAddLeftTextBlock" OnAddBranchBlock="@HandleAddLeftBranchBlock" />
                <AddButtons OnAddTextBlock="@HandleAddRightTextBlock" OnAddBranchBlock="@HandleAddRightBranchBlock" />
            </div>
        }
        else
        {
            <div class="edit-branch-block__add-disabled">
                max columns reached
            </div>
        }


    </div>

    <div class="edit-branch-block__result-wrapper" style="@styleResultColumns">

        <div class="edit-branch-block__result edit-branch-block__result--left">
            <Block ViewModel="@ViewModel.LeftResult" />
        </div>

        <div class="edit-branch-block__result edit-branch-block__result--right">
            <Block ViewModel="@ViewModel.RightResult" />
        </div>

    </div>

    <DeleteDialog @bind-IsVisible="@deleteDialogVisible" OnDeleteBlock="HandleConfirmDelete" />

</div>

@code {
    [Parameter] public string CssClass { get; set; }

    [Parameter] public BranchBlockVM ViewModel { get; set; }

    [Parameter] public EventCallback OnUnselected { get; set; }
    [Parameter] public EventCallback OnDeleted { get; set; }
    [Parameter] public EventCallback<bool> OnChildAdded { get; set; }

    [CascadingParameter] List<int> ColumnsWidth { get; set; }

    string styleResultColumns => columnsViewCalculator.GetResultWrapperStyle(ViewModel, ColumnsWidth);
    string styleBranchColumns => columnsViewCalculator.GetBranchWrapperStyle(ViewModel, ColumnsWidth);
    string styleAddColumns => columnsViewCalculator.GetButtonsWrapperStyle(ViewModel, ColumnsWidth);


    bool addButtonsAvailable => columnsViewCalculator.AddColumnAvailable(ColumnsWidth);

    bool deleteDialogVisible;

    void DeleteBlockClick() => deleteDialogVisible = true;

    async Task HandleUnselected() => await OnUnselected.InvokeAsync();

    async Task HandleConfirmDelete() => await OnDeleted.InvokeAsync();

    async Task HandleAddLeftTextBlock() => await AddBlock(true, true);

    async Task HandleAddLeftBranchBlock() => await AddBlock(true, false);

    async Task HandleAddRightTextBlock() => await AddBlock(false, true);

    async Task HandleAddRightBranchBlock() => await AddBlock(false, false);


    async Task AddBlock(bool left, bool textBlock)
    {
        var currentChild = left ? ViewModel.LeftResult : ViewModel.RightResult;

        IBlockVM block = textBlock
            ? new TextBlockVM() { Child = currentChild }
            : left ? new BranchBlockVM() { LeftResult = currentChild } : new BranchBlockVM() { RightResult = currentChild };
        block.Parent = ViewModel;

        if (left)
            ViewModel.LeftResult = block;
        else
            ViewModel.RightResult = block;

        if (currentChild is not null)
            currentChild.Parent = block;

        await OnChildAdded.InvokeAsync(left);
    }


}
