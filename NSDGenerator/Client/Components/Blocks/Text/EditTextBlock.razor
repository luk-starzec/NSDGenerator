
<div class="@CssClass edit-text-block__wrapper block__wrapper">

    <DeleteButton OnDeleteBlock="@DeleteBlockClick" />

    <div class="edit-text-block__text">
        <textarea @bind="@Model.Text" @bind:event="oninput" @onclick:stopPropagation="true" placeholder="text" />
    </div>

    <AddButtons OnAddTextBlock="@HandleAddTextBlock" OnAddBranchBlock="@HandleAddBranchBlock" />

    <DeleteDialog @bind-IsVisible="@deleteDialogVisible" OnDeleteBlock="@HandleConfirmDelete" />

</div>

@code {
    [Parameter] public string CssClass { get; set; }

    [Parameter] public TextBlockModel Model { get; set; }

    [Parameter] public EventCallback OnChildAdded { get; set; }

    [Parameter] public EventCallback OnBlockDeleted { get; set; }

    bool deleteDialogVisible;

    void DeleteBlockClick() => deleteDialogVisible = true;

    async Task HandleConfirmDelete() => await OnBlockDeleted.InvokeAsync();

    async Task HandleAddTextBlock() => await AddChildBlock(true);

    async Task HandleAddBranchBlock() => await AddChildBlock(false);

    async Task AddChildBlock(bool textBlock)
    {
        var currentChild = Model.Child;

        IBlockModel block = textBlock
            ? new TextBlockModel() { Child = currentChild }
            : new BranchBlockModel() { LeftResult = currentChild };
        block.Parent = Model;
        Model.Child = block;

        if (currentChild is not null)
            currentChild.Parent = block;

        await OnChildAdded.InvokeAsync();
    }

}
