
<div class="@CssClass edit-text-block__wrapper block__wrapper">

    <CloseButton OnClose="@HandleUnselected" />

    <DeleteButton OnDeleteBlock="@DeleteBlockClick" />

    <div class="edit-text-block__text">
        <textarea @bind="@ViewModel.Text" @bind:event="oninput" @onclick:stopPropagation="true" placeholder="text" @ref="textAreaRef" />
    </div>

    <AddButtons OnAddTextBlock="@HandleAddTextBlock" OnAddBranchBlock="@HandleAddBranchBlock" />

    <DeleteDialog @bind-IsVisible="@deleteDialogVisible" OnDeleteBlock="@HandleConfirmDelete" />

</div>

@code {
    [Parameter] public string CssClass { get; set; }

    [Parameter] public TextBlockVM ViewModel { get; set; }

    [Parameter] public EventCallback OnUnselected { get; set; }
    [Parameter] public EventCallback OnChildAdded { get; set; }
    [Parameter] public EventCallback OnDeleted { get; set; }

    ElementReference textAreaRef;

    bool deleteDialogVisible;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
            await textAreaRef.FocusAsync();
    }

    void DeleteBlockClick() => deleteDialogVisible = true;

    async Task HandleUnselected() => await OnUnselected.InvokeAsync();

    async Task HandleConfirmDelete() => await OnDeleted.InvokeAsync();

    async Task HandleAddTextBlock() => await AddChildBlock(true);

    async Task HandleAddBranchBlock() => await AddChildBlock(false);

    async Task AddChildBlock(bool textBlock)
    {
        var currentChild = ViewModel.Child;

        IBlockVM block = textBlock
            ? new TextBlockVM() { Child = currentChild }
            : new BranchBlockVM() { LeftResult = currentChild };
        block.Parent = ViewModel;
        ViewModel.Child = block;

        if (currentChild is not null)
            currentChild.Parent = block;

        await OnChildAdded.InvokeAsync();
    }

}
