
<table class="diagram-list__table">

    <thead>
        <tr>
            <th>
                Name
            </th>
            <th>
                Created
            </th>
            <th>
                Modified
            </th>
            <th>
                Visibility
            </th>
            <th>

            </th>
        </tr>
    </thead>

    <tbody>

        @foreach (var diagram in Diagrams)
        {
            <tr>

                <td>
                    @diagram.Name
                </td>

                <td class="diagram-list__cell--created">
                    @diagram.Created
                </td>

                <td class="diagram-list__cell--modified">
                    @diagram.Modified
                </td>

                <td class="diagram-list__cell--visibility" title="@GetvisibilityInfo(diagram.IsPrivate)">
                    <SvgIcon SvgUrl="@GetvisibilityIcon(diagram.IsPrivate)" />
                </td>

                <td class="diagram-list__cell--buttons">

                    <button @onclick="(async()=>await ViewClick(diagram.Id))">view</button>

                    <button @onclick="(async()=>await DownloadClick(diagram.Id))">download</button>

                </td>

            </tr>
        }

    </tbody>

</table>

@code {
    [Parameter] public IEnumerable<DiagramDto> Diagrams { get; set; }

    [Parameter] public EventCallback<Guid> OnViewDiagram { get; set; }
    [Parameter] public EventCallback<Guid> OnDownloadDiagram { get; set; }

    async Task ViewClick(Guid id) => await OnViewDiagram.InvokeAsync(id);
    async Task DownloadClick(Guid id) => await OnDownloadDiagram.InvokeAsync(id);

    string GetvisibilityIcon(bool isPrivate) => isPrivate ? "/assets/locked-icon.svg" : "/assets/unlocked-icon.svg";
    string GetvisibilityInfo(bool isPrivate) => isPrivate ? "private" : "public";
}
