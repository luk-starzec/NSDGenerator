
<table class="diagram-list__table">

    <thead>
        <tr>
            <th>
                <div class="diagram-list__sortable-header" @onclick="()=>HandleSort(0)">
                    <span>Name</span>
                    <SortingMarker SortDirection="@sorting[0]" />
                </div>
            </th>
            <th>
                <div class="diagram-list__sortable-header" @onclick="()=>HandleSort(1)">
                    <span>Created</span>
                    <SortingMarker SortDirection="@sorting[1]" />
                </div>
            </th>
            <th>
                <div class="diagram-list__sortable-header" @onclick="()=>HandleSort(2)">
                    <span>Modified</span>
                    <SortingMarker SortDirection="@sorting[2]" />
                </div>
            </th>
            <th>
                <div class="diagram-list__sortable-header" @onclick="()=>HandleSort(3)">
                    <span>Visibility</span>
                    <SortingMarker SortDirection="@sorting[3]" />
                </div>
            </th>
            <th>

            </th>
        </tr>
    </thead>

    <tbody>

        @foreach (var diagram in sortedDiagrams)
        {
            <tr>

                <td class="diagram-list__cell">
                    @diagram.Name
                </td>

                <td class="diagram-list__cell diagram-list__cell--created">
                    @diagram.Created
                </td>

                <td class="diagram-list__cell diagram-list__cell--modified">
                    @diagram.Modified
                </td>

                <td class="diagram-list__cell diagram-list__cell--visibility" title="@GetvisibilityInfo(diagram.IsPrivate)">
                    <SvgIcon SvgUrl="@GetvisibilityIcon(diagram.IsPrivate)" />
                </td>

                <td class="diagram-list__cell diagram-list__cell--buttons">

                    <div>
                        <button @onclick="(async()=>await ViewClick(diagram.Id))">view</button>
                        <button @onclick="(async()=>await DownloadClick(diagram.Id))">download</button>
                    </div>

                </td>

            </tr>
        }

    </tbody>

</table>

@code {
    [Parameter]
    public IEnumerable<DiagramInfoDTO> Diagrams
    {
        get => diagrams; set
        {
            diagrams = value;
            SortDiagrams();
        }
    }

    [Parameter] public EventCallback<Guid> OnViewDiagram { get; set; }
    [Parameter] public EventCallback<Guid> OnDownloadDiagram { get; set; }

    IEnumerable<DiagramInfoDTO> diagrams;
    IEnumerable<DiagramInfoDTO> sortedDiagrams;

    SortDirectionEnum[] sorting = new SortDirectionEnum[4];

    async Task ViewClick(Guid id) => await OnViewDiagram.InvokeAsync(id);
    async Task DownloadClick(Guid id) => await OnDownloadDiagram.InvokeAsync(id);

    string GetvisibilityIcon(bool isPrivate) => isPrivate ? "/assets/locked-icon.svg" : "/assets/unlocked-icon.svg";
    string GetvisibilityInfo(bool isPrivate) => isPrivate ? "private" : "public";

    void SortDiagrams()
    {
        var sorted = diagrams;

        if (sorting[0] == SortDirectionEnum.Ascending)
            sorted = sorted.OrderBy(r => r.Name);
        if (sorting[0] == SortDirectionEnum.Descending)
            sorted = sorted.OrderByDescending(r => r.Name);

        if (sorting[1] == SortDirectionEnum.Ascending)
            sorted = sorted.OrderBy(r => r.Created);
        if (sorting[1] == SortDirectionEnum.Descending)
            sorted = sorted.OrderByDescending(r => r.Created);

        if (sorting[2] == SortDirectionEnum.Ascending)
            sorted = sorted.OrderBy(r => r.Modified);
        if (sorting[2] == SortDirectionEnum.Descending)
            sorted = sorted.OrderByDescending(r => r.Modified);

        if (sorting[3] == SortDirectionEnum.Ascending)
            sorted = sorted.OrderBy(r => r.IsPrivate);
        if (sorting[3] == SortDirectionEnum.Descending)
            sorted = sorted.OrderByDescending(r => r.IsPrivate);

        sortedDiagrams = sorted.ToList();
    }

    void HandleSort(int index)
    {
        var nextSort = GetNextSortDirection(sorting[index]);
        ClearSorting();
        sorting[index] = nextSort;
        SortDiagrams();
    }

    void ClearSorting()
    {
        for (int i = 0; i < sorting.Length; i++)
            sorting[i] = SortDirectionEnum.None;
    }

    SortDirectionEnum GetNextSortDirection(SortDirectionEnum sortDirection)
        => sortDirection == SortDirectionEnum.Ascending ? SortDirectionEnum.Descending : SortDirectionEnum.Ascending;
}
