@inject HttpClient httpClient
@inject TokenAuthenticationStateProvider tokenAuthStateProvider
@inject NavigationManager navigationManager

<div class="login-form__wrapper">

    <button class="login-form__close-button" @onclick="CloseForm" title="cancel">
        <SvgIcon SvgUrl="/assets/close-icon.svg" />
    </button>

    <EditForm class="login-form__from" Model="viewModel" OnValidSubmit="HandleSubmit">
        <DataAnnotationsValidator />

        <label class="login-form__label" for="login-frm-email">Email:</label>
        <InputText class="login-form__input" @bind-Value="viewModel.Email" id="login-frm-email" />
        <ValidationMessage For="() => viewModel.Email" />

        <label class="login-form__label" for="login-frm-pass">Password:</label>
        <InputText class="login-form__input" type="password" @bind-Value="viewModel.Password" id="login-frm-pass" />
        <ValidationMessage For="()=>viewModel.Password" />

        @if (showError)
        {
            <p class="validation-message">@error</p>
        }

        <button type="submit" class="login-form__button">
            Log in
        </button>

    </EditForm>

    <div class="login-form__signin-row">
        <span>New user?</span>
        <button @onclick="HandleSignin">Sign in</button>
    </div>

</div>

@code {
    [Parameter]
    public EventCallback OnClose { get; set; }

    LogInVM viewModel = new();

    string error = string.Empty;
    bool showError => !string.IsNullOrEmpty(error);

    private async Task CloseForm()
    {
        await OnClose.InvokeAsync();
    }

    private async Task HandleSubmit()
    {
        error = string.Empty;

        var request = new AuthenticateRequest(viewModel.Email, viewModel.Password);
        var response = await httpClient.PostAsJsonAsync("/api/user/authenticate", request);
        var result = await response.Content.ReadFromJsonAsync<LoginResult>();

        if (result.IsSuccessful)
        {
            await tokenAuthStateProvider.Login(result.Token);
            await OnClose.InvokeAsync();
        }
        else
            error = result.Error;
    }

    private void HandleSignin()
    {
        navigationManager.NavigateTo("/register-user");
    }
}
